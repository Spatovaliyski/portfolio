{"version":3,"file":"bundle.min.js","mappings":"mBAAA,IACMA,EACAC,EACAC,EACAC,EAgBAC,EAmEAC,EAKAC,EAeAC,EAIAC,EAOAC,EAaAC,EAaAC,EA6BAC,EA5KAZ,EAAc,EACdC,EAAS,GACTC,EAAS,EACTC,GAAa,EAgBbC,EAAgB,WAClBH,EAASY,MAAMC,KAAKC,SAASC,iBAAiB,yBAE9C,IAAMC,EAAQF,SAASG,cAAc,kCAC/BC,EAAaF,EAAMG,YAGnBC,EADS,GACKrB,EACpBiB,EAAMK,MAAMC,UAAY,cAAHC,QAAkBxB,EAAcmB,EAAaE,EAAW,OAE7EpB,EAAOwB,SAAQ,SAACC,EAAOC,GACjBA,IAAU3B,GACZ0B,EAAME,UAAUC,OAAO,YAAa,YACpCH,EAAMI,aACNJ,EAAME,UAAUG,IAAI,eAEpBL,EAAME,UAAUG,IAAI,YACpBC,YAAW,WACTN,EAAME,UAAUC,OAAO,aACvBH,EAAME,UAAUC,OAAO,WACzB,GAAG,KAEP,IAEAjB,GACF,EA0CIP,EAAa,SAAU4B,GACzB9B,GAAa,EACbD,EAAoB,eAAX+B,EAAEC,KAAwBD,EAAEE,QAAQ,GAAGC,QAAUH,EAAEG,OAC9D,EAEI9B,EAAQ,SAAU2B,GACpB,GAAK9B,EAAL,CACA,IACMkC,GADsB,cAAXJ,EAAEC,KAAuBD,EAAEE,QAAQ,GAAGC,QAAUH,EAAEG,SACrClC,EAE1BmC,EAAa,IACf5B,IACAN,GAAa,GAENkC,GAAc,KACrB3B,IACAP,GAAa,EAVQ,CAYzB,EAEII,EAAW,SAAU0B,GACvB9B,GAAa,CACf,EAEIK,EAAc,SAAUyB,GAC1B9B,GAAa,CACf,EAKIM,EAAwB,WAGtB,IAFJT,IAGEA,EAAcC,EAAOqC,OAAS,GAGhClC,GACF,EAKIM,EAAwB,aAC1BV,GAEmBC,EAAOqC,SACxBtC,EAAc,GAGhBI,GACF,EAKIO,EAAmB,WACrB,IAAM4B,EAAY1B,MAAMC,KAAKC,SAASC,iBAAiB,yBAGnDuB,EAAUD,SAAWrC,EAAOqC,SAE9BrC,EAASsC,EAETvC,EAAc,EAEdI,IAEJ,EAiBIQ,EAAmB,WACrB,IAAMe,EAAQ3B,EAAc,EACtBwC,EAASvC,EAAOqC,OAChBG,EAAc1B,SAASG,cAAc,0CACrCwB,EAAa3B,SAASG,cAAc,yCAE1CuB,EAAYE,YAAchB,EAC1Be,EAAWC,YAAcH,CAC3B,C","sources":["webpack://TavernSlider/./assets/src/scripts/components/slider.js"],"sourcesContent":["let Slider = (function () {\r\n  let activeIndex = 0;\r\n  let slides = [];\r\n  let startX = 0;\r\n  let isDragging = false;\r\n\r\n  /**\r\n   * Initialize the component\r\n   */\r\n  let _init = () => {\r\n    setTimeout(() => {\r\n      _updateSlides();\r\n      _setupEventListeners();\r\n      _startChangeDetection();\r\n    }, 1000);\r\n  };\r\n\r\n  /**\r\n   * Update slider on drag by adding/subtracting from a simple Index\r\n   */\r\n  let _updateSlides = function () {\r\n    slides = Array.from(document.querySelectorAll('.tavern-slider__item'));\r\n  \r\n    const track = document.querySelector('.tavern-slider__slider-wrapper');\r\n    const trackWidth = track.offsetWidth;\r\n\r\n    const offset = 16;\r\n    const totalOffset = activeIndex * offset;\r\n    track.style.transform = `translateX(${-activeIndex * trackWidth - totalOffset}px)`;\r\n  \r\n    slides.forEach((slide, index) => {\r\n      if (index === activeIndex) {\r\n        slide.classList.remove('is-active', 'fade-out');\r\n        slide.offsetHeight; // Triggers reflow\r\n        slide.classList.add('is-active');\r\n      } else {\r\n        slide.classList.add('fade-out');\r\n        setTimeout(() => {\r\n          slide.classList.remove('is-active');\r\n          slide.classList.remove('fade-out');\r\n        }, 1000);\r\n      }\r\n    });\r\n  \r\n    _setPostPosition();\r\n  };\r\n    \r\n  /**\r\n   * Handles dragging and swiping\r\n   */\r\n  let _setupEventListeners = function () {\r\n    slides.forEach((slide, index) => {\r\n      slide.addEventListener('mousedown', _startDrag);\r\n      slide.addEventListener('mousemove', _drag);\r\n      slide.addEventListener('mouseup', _endDrag);\r\n      slide.addEventListener('mouseleave', _cancelDrag);\r\n    });\r\n\r\n    // Touch events for mobile\r\n    slides.forEach((slide, index) => {\r\n      slide.addEventListener('touchstart', _startDrag);\r\n      slide.addEventListener('touchmove', _drag);\r\n      slide.addEventListener('touchend', _endDrag);\r\n    });\r\n\r\n    // Arrow click events\r\n    const nextArrow = document.querySelector('.tavern-slider__control.next');\r\n    const prevArrow = document.querySelector('.tavern-slider__control.prev');\r\n\r\n    nextArrow.addEventListener('click', _handleNextArrowClick);\r\n    prevArrow.addEventListener('click', _handlePrevArrowClick);\r\n\r\n    // Arrow key events\r\n    document.addEventListener('keydown', function(event) {\r\n      switch (event.key) {\r\n        case 'ArrowLeft':\r\n          _handlePrevArrowClick();\r\n          break;\r\n        case 'ArrowRight':\r\n          _handleNextArrowClick();\r\n          break;\r\n      }\r\n    });\r\n\r\n    _updateSlides();\r\n  };\r\n\r\n  let _startDrag = function (e) {\r\n    isDragging = true;\r\n    startX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;\r\n  };\r\n\r\n  let _drag = function (e) {\r\n    if (!isDragging) return;\r\n    const currentX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;\r\n    const difference = currentX - startX;\r\n\r\n    if (difference > 50) {\r\n      _handlePrevArrowClick();\r\n      isDragging = false;\r\n    }\r\n    else if (difference < -50) {\r\n      _handleNextArrowClick();\r\n      isDragging = false;\r\n    }\r\n  };\r\n\r\n  let _endDrag = function (e) {\r\n    isDragging = false;\r\n  };\r\n\r\n  let _cancelDrag = function (e) {\r\n    isDragging = false;\r\n  };\r\n\r\n  /**\r\n   * Drag => Position Left\r\n   */\r\n  let _handlePrevArrowClick = function () {\r\n    activeIndex--;\r\n\r\n    if (0 > activeIndex) {\r\n      activeIndex = slides.length - 1;\r\n    }\r\n\r\n    _updateSlides();\r\n  };\r\n\r\n  /**\r\n   * Drag => Position Right\r\n   */\r\n  let _handleNextArrowClick = function () {\r\n    activeIndex++;\r\n\r\n    if (activeIndex >= slides.length) {\r\n      activeIndex = 0;\r\n    }\r\n\r\n    _updateSlides();\r\n  };\r\n\r\n  /**\r\n   * Check for changes in the slider and reinitialize if necessary\r\n   */\r\n  let _checkForChanges = function () {\r\n    const newSlides = Array.from(document.querySelectorAll('.tavern-slider__item'));\r\n\r\n    // Check if the number of slides has changed\r\n    if (newSlides.length !== slides.length) {\r\n      // Number of slides has changed, reinitialize the slider\r\n      slides = newSlides;\r\n\r\n      activeIndex = 0;\r\n      \r\n      _updateSlides();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Start detecting changes in the slider\r\n   */\r\n    let _startChangeDetection = function () {\r\n      // Use MutationObserver to detect changes in the DOM\r\n      const observer = new MutationObserver(_checkForChanges);\r\n  \r\n      // Observe changes in the parent element of slides\r\n      const parentElement = document.querySelector('.tavern-slider__slider-wrapper');\r\n      observer.observe(parentElement, { childList: true, subtree: true });\r\n    };\r\n\r\n  /**\r\n   * Display the amount of posts and which post the target is in\r\n   */\r\n  let _setPostPosition = function () {\r\n    const index = activeIndex + 1;\r\n    const amount = slides.length;\r\n    const currentPost = document.querySelector('.tavern-slider__controls .current-post');\r\n    const totalPosts = document.querySelector('.tavern-slider__controls .total-posts');\r\n\r\n    currentPost.textContent = index;\r\n    totalPosts.textContent = amount;\r\n  };\r\n\r\n  return {\r\n    init: function () {\r\n      _init();\r\n    }\r\n  }\r\n})();\r\n\r\nexport default Slider;"],"names":["activeIndex","slides","startX","isDragging","_updateSlides","_startDrag","_drag","_endDrag","_cancelDrag","_handlePrevArrowClick","_handleNextArrowClick","_checkForChanges","_setPostPosition","Array","from","document","querySelectorAll","track","querySelector","trackWidth","offsetWidth","totalOffset","style","transform","concat","forEach","slide","index","classList","remove","offsetHeight","add","setTimeout","e","type","touches","clientX","difference","length","newSlides","amount","currentPost","totalPosts","textContent"],"sourceRoot":""}